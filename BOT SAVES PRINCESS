def displayPathtoPrincess(N, grid):
    # Find the positions of 'm' and 'p'
    for i in range(N):
        for j in range(N):
            if grid[i][j] == 'm':
                bot_position = (i, j)
            elif grid[i][j] == 'p':
                princess_position = (i, j)

    # Calculate the row and column differences between bot and princess
    row_diff = princess_position[0] - bot_position[0]
    col_diff = princess_position[1] - bot_position[1]

    # Generate moves to rescue the princess
    moves = []
    if row_diff < 0:
        moves.extend(['UP'] * abs(row_diff))
    elif row_diff > 0:
        moves.extend(['DOWN'] * row_diff)
    
    if col_diff < 0:
        moves.extend(['LEFT'] * abs(col_diff))
    elif col_diff > 0:
        moves.extend(['RIGHT'] * col_diff)
    
    # Print the moves
    for move in moves:
        print(move)

# Sample input
N = 3
grid = [
    "---",
    "-m-",
    "p--"
]

# Call the function to rescue Princess Peach
displayPathtoPrincess(N, grid)
